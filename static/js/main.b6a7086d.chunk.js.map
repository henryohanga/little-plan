{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/Landing/Landing.js","components/FormControl/FormControl.js","components/FormGroup/FormGroup.js","components/Recommendation/Recommendation.js","components/Recommendations/Recommendations.js","data/formControls.js","App.js","reportWebVitals.js","index.js"],"names":["Header","onClear","className","onClick","Footer","Date","getFullYear","Landing","onGetStarted","FormControl","control","onControlChange","options","type","label","items","map","item","Fragment","id","value","name","controlName","onChange","e","currentTarget","htmlFor","answer","errors","error","index","FormGroup","controls","currentIndex","onNext","onFormUpdate","isButtonLoading","currentControl","disabled","Boolean","length","Recommendation","recommendation","toLowerCase","split","join","Number","price","amount","toFixed","toLocaleString","navigator","language","periodicity","Recommendations","recommendations","isFetching","formControls","placeholder","visibleOn","previousValue","App","useState","setControls","setCurrentIndex","showForm","setShowForm","setIsButtonLoading","hasToken","setHasToken","setRecommendations","setIsFetching","useEffect","hasAccessToken","localStorage","getItem","fetchRecommendations","JSON","parse","nextIndex","findIndex","el","computeNextFromPrevious","potentialNext","previous","onSubmit","a","formData","reduce","acc","next","hasChildren","payload","fetchToken","data","handleErrors","jwt","saveToken","fetch","process","method","headers","body","stringify","numberOfChildren","resp","json","errorKeys","Object","keys","firstErrorIndex","updatedControls","includes","token","removeItem","setItem","Accept","Authorization","ok","sort","b","clear","goToNextControl","updateControls","onFormSubmitted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6a7086d.chunk.js","sourcesContent":["import './Header.scss';\n\nconst Header = ({ onClear }) => {\n  return (\n    <div className=\"d-flex Header\">\n      <h1 className=\"p-h1 tc-grey-100\">Your Little Plan</h1>\n      <button className=\"p-btn--secondary\" onClick={onClear}>\n        Clear\n      </button>\n    </div>\n  );\n};\n\nexport default Header;\n","import './Footer.scss';\n\nconst Footer = () => {\n  return (\n    <footer className=\"d-flex Footer\">\n      <p className=\"tc-grey-300\">\n        &copy; {new Date().getFullYear()} The Little Plan\n      </p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import './Landing.scss';\n\nconst Landing = ({ onGetStarted }) => {\n  return (\n    <div className=\"w60\">\n      <h2 className=\"p-h2  mb16\">\n        Looking for a recommendation for your next insurance plan?\n      </h2>\n      <p className=\"p-p\">\n        Look no more, because we have some already. Just provide us with a few\n        details\n      </p>\n\n      <button className=\"p-btn--primary mt32\" onClick={onGetStarted}>\n        Get started\n      </button>\n    </div>\n  );\n};\n\nexport default Landing;\n","import React from 'react';\n\nimport './FormControl.scss';\n\nconst FormControl = ({ control, onControlChange }) => {\n  if (control.options.type === 'radio') {\n    return (\n      <div>\n        <label className=\"d-inline-block mb16\">{control.label}</label>\n        {control.options.items.map((item) => {\n          return (\n            <React.Fragment key={item.value}>\n              <input\n                id={item.value}\n                className=\"p-radio\"\n                type=\"radio\"\n                value={item.value}\n                name={control.controlName}\n                onChange={(e) =>\n                  onControlChange(control.controlName, e.currentTarget.value)\n                }\n              />\n              <label htmlFor={item.value} className=\"p-label\">\n                {item.label}\n              </label>\n            </React.Fragment>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <label htmlFor={control.controlName} className=\"d-inline-block mb16\">\n        {control.label}\n      </label>\n\n      <input\n        className=\"p-input\"\n        {...control.options}\n        value={control.answer}\n        onChange={(e) =>\n          onControlChange(control.controlName, e.currentTarget.value)\n        }\n      />\n\n      <ul className=\"mt8 \">\n        {(control.errors ?? []).map((error, index) => (\n          <li key={index} className=\"p-p--small tc-red-500\">\n            {error}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default FormControl;\n","import FormControl from '../FormControl/FormControl';\n\nconst FormGroup = ({\n  controls,\n  currentIndex,\n  onNext,\n  onFormUpdate,\n  isButtonLoading,\n}) => {\n  const currentControl = controls[currentIndex];\n\n  return (\n    <form>\n      <FormControl control={currentControl} onControlChange={onFormUpdate} />\n\n      <button\n        type=\"button\"\n        className={`p-btn--primary mt32 ${\n          isButtonLoading ? 'p-btn--loading' : ''\n        }`}\n        disabled={!Boolean(currentControl.answer)}\n        onClick={onNext}\n      >\n        {currentIndex === controls.length - 1\n          ? 'Get your recommendation'\n          : 'Next'}\n      </button>\n    </form>\n  );\n};\n\nexport default FormGroup;\n","import './Recommendation.scss';\n\nconst Recommendation = ({ recommendation }) => {\n  return (\n    <li className=\"Recommendation mb8\">\n      <span className=\"Recommendation-type\">\n        {recommendation.type.toLowerCase().split('_').join(' ')}\n      </span>\n      <span>\n        €\n        {Number(recommendation.price.amount)\n          .toFixed(2)\n          .toLocaleString(navigator.language || 'de-DE')}{' '}\n        per {recommendation.price.periodicity.toLowerCase()}\n      </span>\n    </li>\n  );\n};\n\nexport default Recommendation;\n","import Recommendation from '../Recommendation/Recommendation';\n\nconst Recommendations = ({ recommendations, isFetching }) => {\n  return (\n    <div className=\"Recommendations\">\n      <h2 className=\"p-h2\">We got your recommendation</h2>\n      <p className=\"p-p\">\n        Based on your answers, this is what makes sense for you and what you\n        should pay.{' '}\n      </p>\n\n      {isFetching ? (\n        <div className=\"d-flex Recommendations-spinner mt32\">\n          <div className=\"ds-spinner ds-spinner__m\" />\n        </div>\n      ) : (\n        <ul className=\"mt16\">\n          {recommendations.map((recommendation) => (\n            <Recommendation\n              key={recommendation.type}\n              recommendation={recommendation}\n            />\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Recommendations;\n","export const formControls = [\n  {\n    controlName: 'firstName',\n    label: \"What's your first name?\",\n    options: {\n      placeholder: 'e.g Jane',\n      type: 'text',\n    },\n  },\n  {\n    controlName: 'address',\n    label: \"What's your current address?\",\n    options: {\n      type: 'text',\n      placeholder: 'e.g Lohmühlenstraße 65',\n    },\n  },\n  {\n    controlName: 'occupation',\n    label: \"What's your occupation\",\n    options: {\n      type: 'radio',\n      items: [\n        {\n          label: 'Employed',\n          value: 'EMPLOYED',\n        },\n        {\n          label: 'Self employed',\n          value: 'SELF_EMPLOYED',\n        },\n        {\n          label: 'Student',\n          value: 'STUDENT',\n        },\n      ],\n    },\n  },\n  {\n    controlName: 'hasChildren',\n    label: 'Do you have any children?',\n    options: {\n      type: 'radio',\n      items: [\n        {\n          label: 'Yes',\n          value: 'HAS_CHILDREN',\n        },\n        {\n          label: 'No',\n          value: 'HAS_NO_CHILDREN',\n        },\n      ],\n    },\n  },\n  {\n    controlName: 'numberOfChildren',\n    label: 'How many children do you have?',\n    options: {\n      type: 'number',\n      placeholder: 'e.g 2',\n    },\n    visibleOn: {\n      previousValue: 'HAS_CHILDREN',\n    },\n  },\n  {\n    controlName: 'email',\n    label: \"What's your email?\",\n    options: {\n      type: 'email',\n      placeholder: 'e.g jane.doe@getpopsure.com',\n    },\n  },\n];\n","import React, { useEffect, useState } from 'react';\n\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\nimport Landing from './components/Landing/Landing';\nimport FormGroup from './components/FormGroup/FormGroup';\nimport Recommendations from './components/Recommendations/Recommendations';\n\nimport { formControls } from './data/formControls';\n\nimport '@popsure/dirty-swan/dist/index.css';\n\nimport './App.scss';\n\nfunction App() {\n  const [controls, setControls] = useState(() =>\n    formControls.map((control) => ({ ...control, answer: '', errors: [] }))\n  );\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [showForm, setShowForm] = useState(false);\n  const [isButtonLoading, setIsButtonLoading] = useState(false);\n  const [hasToken, setHasToken] = useState(false);\n  const [recommendations, setRecommendations] = useState([]);\n  const [isFetching, setIsFetching] = useState(false);\n\n  /**\n   * Handle form data change\n   * @param {String} controlName\n   * @param {*} value\n   */\n  const onFormUpdate = (controlName, value) => {\n    const updateControls = controls.map((control) => {\n      if (control.controlName === controlName) {\n        return { ...control, answer: value };\n      }\n\n      return control;\n    });\n\n    setControls(updateControls);\n  };\n\n  /**\n   * Move to the next control, considering any\n   * inter-dependencies among controls\n   */\n  const goToNextControl = () => {\n    const currentControl = controls[currentIndex];\n    const potentialNext = controls[currentIndex + 1];\n\n    if (potentialNext.visibleOn?.previousValue) {\n      if (currentControl.answer === potentialNext.visibleOn.previousValue) {\n        setCurrentIndex((currentIndex) => currentIndex + 1);\n      } else {\n        setCurrentIndex((currentIndex) => currentIndex + 2);\n      }\n    } else {\n      setCurrentIndex((currentIndex) => currentIndex + 1);\n    }\n  };\n\n  /**\n   * Handle next/submit button click\n   */\n  const onNext = () => {\n    if (currentIndex === controls.length - 1) {\n      onSubmit();\n    } else {\n      goToNextControl();\n    }\n\n    localStorage.setItem('formControls', JSON.stringify(controls));\n  };\n\n  /**\n   * Initialise app states from localStorage\n   * including checking whether a user already\n   * has a token or not.\n   */\n  useEffect(() => {\n    const hasAccessToken = Boolean(localStorage.getItem('accessToken'));\n    setHasToken(hasAccessToken);\n\n    if (hasAccessToken) {\n      fetchRecommendations();\n    }\n\n    const formControls = JSON.parse(localStorage.getItem('formControls'));\n    let nextIndex = (formControls ?? []).findIndex((el) => !el.answer);\n\n    if (nextIndex >= 0) {\n      nextIndex = computeNextFromPrevious(nextIndex);\n\n      setCurrentIndex(nextIndex);\n\n      // unset errors\n      setControls(() =>\n        formControls.map((control) => ({ ...control, errors: [] }))\n      );\n\n      setShowForm(true);\n    }\n  }, []);\n\n  /**\n   * Find exact index of the next item based on any\n   * dependencies on the previous value\n   * @param {Number} nextIndex\n   */\n  const computeNextFromPrevious = (nextIndex) => {\n    const potentialNext = formControls[nextIndex];\n    const previous = formControls[nextIndex - 1];\n\n    if (potentialNext.visibleOn?.previousValue) {\n      if (previous.answer !== potentialNext.visibleOn.previousValue) {\n        nextIndex += 1;\n      }\n    }\n\n    return nextIndex;\n  };\n\n  /**\n   * Submit user responses to the API\n   */\n  const onSubmit = async () => {\n    const formData = controls.reduce((acc, next) => {\n      acc[next.controlName] = next.answer;\n      return acc;\n    }, {});\n    const { hasChildren, ...payload } = formData;\n\n    // unset errors\n    setControls(() => controls.map((control) => ({ ...control, errors: [] })));\n\n    // show loaser on submit button\n    setIsButtonLoading(true);\n\n    const data = await fetchToken(payload);\n\n    if (data.errors) {\n      handleErrors(data.errors);\n    }\n\n    if (data.jwt) {\n      saveToken(data.jwt);\n      setHasToken(true);\n      await fetchRecommendations();\n    }\n\n    setIsButtonLoading(false);\n  };\n\n  const fetchToken = async (payload) => {\n    const resp = await fetch(process.env.REACT_APP_API_BASE_URL + '/user', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        ...payload,\n        numberOfChildren: Number(payload.numberOfChildren),\n      }),\n    });\n\n    return resp.json();\n  };\n\n  /**\n   * Map errors to controls through errors control property\n   * @param {object} errors the error object\n   */\n  const handleErrors = (errors) => {\n    const errorKeys = Object.keys(errors);\n\n    let firstErrorIndex = null;\n\n    const updatedControls = controls.map((control, index) => {\n      if (errorKeys.includes(control.controlName)) {\n        // track the first error index\n        if (!firstErrorIndex) {\n          firstErrorIndex = index;\n        }\n\n        return {\n          ...control,\n          errors: errors[control.controlName],\n        };\n      }\n\n      return control;\n    });\n\n    setControls(() => updatedControls);\n\n    // move the user to the first error index\n    if (firstErrorIndex !== null) {\n      setCurrentIndex(firstErrorIndex);\n    }\n  };\n\n  /**\n   * Save the token to localStorage\n   * @param {string} token the token to be saved\n   */\n  const saveToken = (token) => {\n    localStorage.removeItem('accessToken');\n    localStorage.setItem('accessToken', token);\n  };\n\n  /**\n   * Fetch recommendations\n   */\n  const fetchRecommendations = async () => {\n    setIsFetching(true);\n\n    const resp = await fetch(\n      process.env.REACT_APP_API_BASE_URL + '/recommendation',\n      {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('accessToken'),\n        },\n      }\n    );\n\n    let data = await resp.json();\n\n    // sort by plan amount and update recommendations\n    if (resp.ok) {\n      data.sort((a, b) => a.price.amount - b.price.amount);\n      setRecommendations(data);\n    }\n\n    setIsFetching(false);\n    return data;\n  };\n\n  /**\n   * Reset the app state\n   */\n  const onClear = () => {\n    localStorage.clear();\n    setControls(() =>\n      formControls.map((control) => ({ ...control, answer: '', errors: [] }))\n    );\n    setCurrentIndex(0);\n    setHasToken(false);\n    setShowForm(false);\n  };\n\n  return (\n    <div className=\"d-flex App ws8\">\n      <Header onClear={onClear} />\n\n      <main className=\"App-main\">\n        {hasToken ? (\n          <Recommendations\n            recommendations={recommendations}\n            isFetching={isFetching}\n          />\n        ) : (\n          <React.Fragment>\n            {showForm ? (\n              <FormGroup\n                controls={controls}\n                currentIndex={currentIndex}\n                onNext={onNext}\n                onFormUpdate={onFormUpdate}\n                onFormSubmitted={onSubmit}\n                isButtonLoading={isButtonLoading}\n              />\n            ) : (\n              <Landing onGetStarted={() => setShowForm(true)} />\n            )}\n          </React.Fragment>\n        )}\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}